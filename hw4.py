# 1. Написать декоратор и декорируемую функцию.
# Функция – печатает рандомное число от 1 до 100.
# Декоратор – печатает фразу: «Твоё рандомное число:», а на следующей строке само рандомное число.

def dec(func):              #Декоратор
    def wrapper():
        print('Твоё рандомное число:')
        func()
    return wrapper
@dec
def rand():                  #Функция
    import random as r
    print(r.randint(1, 101))


# print all
rand()

# 2. Написать декоратор и декорируемую функцию. Функция – возвращает рандомное число от 1 до 50.
# Декоратор – возвращает список из чисел от рандомного числа в функции до 100.
# *Подумайте, должны ли функция и декоратор принимать аргументы и как сделать список чисел от n до m.

def dec2(func):              #Декоратор
    def wrapper():
        print([i for i in range(func(), 101)])
    return wrapper

@dec2
def rand2():                  #Функция
    import random as r
    return r.randint(1, 51)


# print all
rand2()

# 3. Написать декоратор и декорируемую функцию.
# Функция принимает какой-либо аргумент и возвращает его же.
# Декоратор – возвращает тип объекта аргумента функции на русском языке.
# Должно работать для типов: строка, целое число, вещественное число, кортеж, список, словарь.
# *Вспомните встроенную функцию, которая помогает получить тип объекта.


def dec3(func):              #Декоратор
    def wrapper(a):

        ty = str(type(func(a)))

        if ty == "<class 'int'>":
            print('целое число')

        if ty == "<class 'float'>":
            print('вещественное число')

        if ty == "<class 'str'>":
            print('строка')

        if ty == "<class 'tuple'>":
            print('кортеж')

        if ty == "<class 'list'>":
            print('список')

        if ty == "<class 'dict'>":
            print('словарь')

    return wrapper

@dec3
def f(a):                  #Функция
    return a

# print all
f(3)
f(3.)
f('gg')
f((1,))
f({})
f([22])


# 4. Написать декоратор и декорируемую функцию.
# Функция – принимает бесконечное количество целых чисел и возвращает список.
# Декоратор – возвращает список только из уникальных значений, упорядоченных от большего к меньшему.

def dec4(func):              #Декоратор
    def wrapper(*args):
        print(sorted(list(set(func(*args))), reverse=True))
    return wrapper

@dec4
def f4(*args):                  #Функция
    return list(args)

f4(20,6,4,5,6,21,33,33,20)

# 5. Написать декоратор и декорируемую функцию. Функция – принимает строку и возвращает её же,
# но каждый символ строки повторяется дважды ( ‘ab’ – ‘aabb’ ).
# Декоратор – превращает изменённую функцией строку в шифр с помощью встроенной функции ord(код символа в ASCII),
# т.е. создаёт новую строку, применяя к каждому элементу старой строки функцию ord.


def dec5(func):              #Декоратор
    def wrapper(s):
        print(''.join(list(str(ord(i)) for i in func(s))))
    return wrapper

@dec5
def f5(s):                  #Функция
    return ''.join(list(i*2 for i in s))

f5('guopr')

